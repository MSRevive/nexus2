// Code generated by entc, DO NOT EDIT.

package character

import (
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/msrevive/nexus2/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Steamid applies equality check predicate on the "steamid" field. It's identical to SteamidEQ.
func Steamid(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSteamid), v))
	})
}

// Slot applies equality check predicate on the "slot" field. It's identical to SlotEQ.
func Slot(v int) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSlot), v))
	})
}

// Data applies equality check predicate on the "data" field. It's identical to DataEQ.
func Data(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldData), v))
	})
}

// SteamidEQ applies the EQ predicate on the "steamid" field.
func SteamidEQ(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSteamid), v))
	})
}

// SteamidNEQ applies the NEQ predicate on the "steamid" field.
func SteamidNEQ(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSteamid), v))
	})
}

// SteamidIn applies the In predicate on the "steamid" field.
func SteamidIn(vs ...string) predicate.Character {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Character(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSteamid), v...))
	})
}

// SteamidNotIn applies the NotIn predicate on the "steamid" field.
func SteamidNotIn(vs ...string) predicate.Character {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Character(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSteamid), v...))
	})
}

// SteamidGT applies the GT predicate on the "steamid" field.
func SteamidGT(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSteamid), v))
	})
}

// SteamidGTE applies the GTE predicate on the "steamid" field.
func SteamidGTE(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSteamid), v))
	})
}

// SteamidLT applies the LT predicate on the "steamid" field.
func SteamidLT(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSteamid), v))
	})
}

// SteamidLTE applies the LTE predicate on the "steamid" field.
func SteamidLTE(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSteamid), v))
	})
}

// SteamidContains applies the Contains predicate on the "steamid" field.
func SteamidContains(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSteamid), v))
	})
}

// SteamidHasPrefix applies the HasPrefix predicate on the "steamid" field.
func SteamidHasPrefix(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSteamid), v))
	})
}

// SteamidHasSuffix applies the HasSuffix predicate on the "steamid" field.
func SteamidHasSuffix(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSteamid), v))
	})
}

// SteamidEqualFold applies the EqualFold predicate on the "steamid" field.
func SteamidEqualFold(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSteamid), v))
	})
}

// SteamidContainsFold applies the ContainsFold predicate on the "steamid" field.
func SteamidContainsFold(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSteamid), v))
	})
}

// SlotEQ applies the EQ predicate on the "slot" field.
func SlotEQ(v int) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSlot), v))
	})
}

// SlotNEQ applies the NEQ predicate on the "slot" field.
func SlotNEQ(v int) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSlot), v))
	})
}

// SlotIn applies the In predicate on the "slot" field.
func SlotIn(vs ...int) predicate.Character {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Character(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSlot), v...))
	})
}

// SlotNotIn applies the NotIn predicate on the "slot" field.
func SlotNotIn(vs ...int) predicate.Character {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Character(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSlot), v...))
	})
}

// SlotGT applies the GT predicate on the "slot" field.
func SlotGT(v int) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSlot), v))
	})
}

// SlotGTE applies the GTE predicate on the "slot" field.
func SlotGTE(v int) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSlot), v))
	})
}

// SlotLT applies the LT predicate on the "slot" field.
func SlotLT(v int) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSlot), v))
	})
}

// SlotLTE applies the LTE predicate on the "slot" field.
func SlotLTE(v int) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSlot), v))
	})
}

// DataEQ applies the EQ predicate on the "data" field.
func DataEQ(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldData), v))
	})
}

// DataNEQ applies the NEQ predicate on the "data" field.
func DataNEQ(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldData), v))
	})
}

// DataIn applies the In predicate on the "data" field.
func DataIn(vs ...string) predicate.Character {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Character(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldData), v...))
	})
}

// DataNotIn applies the NotIn predicate on the "data" field.
func DataNotIn(vs ...string) predicate.Character {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Character(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldData), v...))
	})
}

// DataGT applies the GT predicate on the "data" field.
func DataGT(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldData), v))
	})
}

// DataGTE applies the GTE predicate on the "data" field.
func DataGTE(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldData), v))
	})
}

// DataLT applies the LT predicate on the "data" field.
func DataLT(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldData), v))
	})
}

// DataLTE applies the LTE predicate on the "data" field.
func DataLTE(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldData), v))
	})
}

// DataContains applies the Contains predicate on the "data" field.
func DataContains(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldData), v))
	})
}

// DataHasPrefix applies the HasPrefix predicate on the "data" field.
func DataHasPrefix(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldData), v))
	})
}

// DataHasSuffix applies the HasSuffix predicate on the "data" field.
func DataHasSuffix(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldData), v))
	})
}

// DataEqualFold applies the EqualFold predicate on the "data" field.
func DataEqualFold(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldData), v))
	})
}

// DataContainsFold applies the ContainsFold predicate on the "data" field.
func DataContainsFold(v string) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldData), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Character) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Character) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Character) predicate.Character {
	return predicate.Character(func(s *sql.Selector) {
		p(s.Not())
	})
}
