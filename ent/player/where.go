// Code generated by entc, DO NOT EDIT.

package player

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/msrevive/nexus2/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Player {
	return predicate.Player(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Player {
	return predicate.Player(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Player {
	return predicate.Player(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Player {
	return predicate.Player(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Player {
	return predicate.Player(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Player {
	return predicate.Player(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Player {
	return predicate.Player(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Player {
	return predicate.Player(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Player {
	return predicate.Player(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Player {
	return predicate.Player(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Player {
	return predicate.Player(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// Steamid applies equality check predicate on the "steamid" field. It's identical to SteamidEQ.
func Steamid(v string) predicate.Player {
	return predicate.Player(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSteamid), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Player {
	return predicate.Player(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Player {
	return predicate.Player(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Player {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Player(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Player {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Player(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Player {
	return predicate.Player(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Player {
	return predicate.Player(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Player {
	return predicate.Player(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Player {
	return predicate.Player(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Player {
	return predicate.Player(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Player {
	return predicate.Player(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Player {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Player(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Player {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Player(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Player {
	return predicate.Player(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Player {
	return predicate.Player(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Player {
	return predicate.Player(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Player {
	return predicate.Player(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// SteamidEQ applies the EQ predicate on the "steamid" field.
func SteamidEQ(v string) predicate.Player {
	return predicate.Player(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSteamid), v))
	})
}

// SteamidNEQ applies the NEQ predicate on the "steamid" field.
func SteamidNEQ(v string) predicate.Player {
	return predicate.Player(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSteamid), v))
	})
}

// SteamidIn applies the In predicate on the "steamid" field.
func SteamidIn(vs ...string) predicate.Player {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Player(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSteamid), v...))
	})
}

// SteamidNotIn applies the NotIn predicate on the "steamid" field.
func SteamidNotIn(vs ...string) predicate.Player {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Player(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSteamid), v...))
	})
}

// SteamidGT applies the GT predicate on the "steamid" field.
func SteamidGT(v string) predicate.Player {
	return predicate.Player(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSteamid), v))
	})
}

// SteamidGTE applies the GTE predicate on the "steamid" field.
func SteamidGTE(v string) predicate.Player {
	return predicate.Player(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSteamid), v))
	})
}

// SteamidLT applies the LT predicate on the "steamid" field.
func SteamidLT(v string) predicate.Player {
	return predicate.Player(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSteamid), v))
	})
}

// SteamidLTE applies the LTE predicate on the "steamid" field.
func SteamidLTE(v string) predicate.Player {
	return predicate.Player(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSteamid), v))
	})
}

// SteamidContains applies the Contains predicate on the "steamid" field.
func SteamidContains(v string) predicate.Player {
	return predicate.Player(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSteamid), v))
	})
}

// SteamidHasPrefix applies the HasPrefix predicate on the "steamid" field.
func SteamidHasPrefix(v string) predicate.Player {
	return predicate.Player(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSteamid), v))
	})
}

// SteamidHasSuffix applies the HasSuffix predicate on the "steamid" field.
func SteamidHasSuffix(v string) predicate.Player {
	return predicate.Player(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSteamid), v))
	})
}

// SteamidEqualFold applies the EqualFold predicate on the "steamid" field.
func SteamidEqualFold(v string) predicate.Player {
	return predicate.Player(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSteamid), v))
	})
}

// SteamidContainsFold applies the ContainsFold predicate on the "steamid" field.
func SteamidContainsFold(v string) predicate.Player {
	return predicate.Player(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSteamid), v))
	})
}

// HasCharacters applies the HasEdge predicate on the "characters" edge.
func HasCharacters() predicate.Player {
	return predicate.Player(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CharactersTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CharactersTable, CharactersColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCharactersWith applies the HasEdge predicate on the "characters" edge with a given conditions (other predicates).
func HasCharactersWith(preds ...predicate.Character) predicate.Player {
	return predicate.Player(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CharactersInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, CharactersTable, CharactersColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Player) predicate.Player {
	return predicate.Player(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Player) predicate.Player {
	return predicate.Player(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Player) predicate.Player {
	return predicate.Player(func(s *sql.Selector) {
		p(s.Not())
	})
}
