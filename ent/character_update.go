// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/msrevive/nexus2/ent/character"
	"github.com/msrevive/nexus2/ent/predicate"
)

// CharacterUpdate is the builder for updating Character entities.
type CharacterUpdate struct {
	config
	hooks    []Hook
	mutation *CharacterMutation
}

// Where appends a list predicates to the CharacterUpdate builder.
func (cu *CharacterUpdate) Where(ps ...predicate.Character) *CharacterUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetSteamid sets the "steamid" field.
func (cu *CharacterUpdate) SetSteamid(u uint64) *CharacterUpdate {
	cu.mutation.ResetSteamid()
	cu.mutation.SetSteamid(u)
	return cu
}

// AddSteamid adds u to the "steamid" field.
func (cu *CharacterUpdate) AddSteamid(u int64) *CharacterUpdate {
	cu.mutation.AddSteamid(u)
	return cu
}

// SetSlot sets the "slot" field.
func (cu *CharacterUpdate) SetSlot(u uint8) *CharacterUpdate {
	cu.mutation.ResetSlot()
	cu.mutation.SetSlot(u)
	return cu
}

// AddSlot adds u to the "slot" field.
func (cu *CharacterUpdate) AddSlot(u int8) *CharacterUpdate {
	cu.mutation.AddSlot(u)
	return cu
}

// SetName sets the "name" field.
func (cu *CharacterUpdate) SetName(s string) *CharacterUpdate {
	cu.mutation.SetName(s)
	return cu
}

// SetGender sets the "gender" field.
func (cu *CharacterUpdate) SetGender(u uint8) *CharacterUpdate {
	cu.mutation.ResetGender()
	cu.mutation.SetGender(u)
	return cu
}

// AddGender adds u to the "gender" field.
func (cu *CharacterUpdate) AddGender(u int8) *CharacterUpdate {
	cu.mutation.AddGender(u)
	return cu
}

// SetRace sets the "race" field.
func (cu *CharacterUpdate) SetRace(u uint8) *CharacterUpdate {
	cu.mutation.ResetRace()
	cu.mutation.SetRace(u)
	return cu
}

// AddRace adds u to the "race" field.
func (cu *CharacterUpdate) AddRace(u int8) *CharacterUpdate {
	cu.mutation.AddRace(u)
	return cu
}

// SetFlags sets the "flags" field.
func (cu *CharacterUpdate) SetFlags(s string) *CharacterUpdate {
	cu.mutation.SetFlags(s)
	return cu
}

// SetNillableFlags sets the "flags" field if the given value is not nil.
func (cu *CharacterUpdate) SetNillableFlags(s *string) *CharacterUpdate {
	if s != nil {
		cu.SetFlags(*s)
	}
	return cu
}

// SetQuickslots sets the "quickslots" field.
func (cu *CharacterUpdate) SetQuickslots(s string) *CharacterUpdate {
	cu.mutation.SetQuickslots(s)
	return cu
}

// SetNillableQuickslots sets the "quickslots" field if the given value is not nil.
func (cu *CharacterUpdate) SetNillableQuickslots(s *string) *CharacterUpdate {
	if s != nil {
		cu.SetQuickslots(*s)
	}
	return cu
}

// SetQuests sets the "quests" field.
func (cu *CharacterUpdate) SetQuests(s string) *CharacterUpdate {
	cu.mutation.SetQuests(s)
	return cu
}

// SetNillableQuests sets the "quests" field if the given value is not nil.
func (cu *CharacterUpdate) SetNillableQuests(s *string) *CharacterUpdate {
	if s != nil {
		cu.SetQuests(*s)
	}
	return cu
}

// SetGuild sets the "guild" field.
func (cu *CharacterUpdate) SetGuild(s string) *CharacterUpdate {
	cu.mutation.SetGuild(s)
	return cu
}

// SetKills sets the "kills" field.
func (cu *CharacterUpdate) SetKills(i int16) *CharacterUpdate {
	cu.mutation.ResetKills()
	cu.mutation.SetKills(i)
	return cu
}

// AddKills adds i to the "kills" field.
func (cu *CharacterUpdate) AddKills(i int16) *CharacterUpdate {
	cu.mutation.AddKills(i)
	return cu
}

// SetGold sets the "gold" field.
func (cu *CharacterUpdate) SetGold(u uint32) *CharacterUpdate {
	cu.mutation.ResetGold()
	cu.mutation.SetGold(u)
	return cu
}

// AddGold adds u to the "gold" field.
func (cu *CharacterUpdate) AddGold(u int32) *CharacterUpdate {
	cu.mutation.AddGold(u)
	return cu
}

// SetSkills sets the "skills" field.
func (cu *CharacterUpdate) SetSkills(s string) *CharacterUpdate {
	cu.mutation.SetSkills(s)
	return cu
}

// SetNillableSkills sets the "skills" field if the given value is not nil.
func (cu *CharacterUpdate) SetNillableSkills(s *string) *CharacterUpdate {
	if s != nil {
		cu.SetSkills(*s)
	}
	return cu
}

// SetPets sets the "pets" field.
func (cu *CharacterUpdate) SetPets(s string) *CharacterUpdate {
	cu.mutation.SetPets(s)
	return cu
}

// SetNillablePets sets the "pets" field if the given value is not nil.
func (cu *CharacterUpdate) SetNillablePets(s *string) *CharacterUpdate {
	if s != nil {
		cu.SetPets(*s)
	}
	return cu
}

// SetHealth sets the "health" field.
func (cu *CharacterUpdate) SetHealth(i int) *CharacterUpdate {
	cu.mutation.ResetHealth()
	cu.mutation.SetHealth(i)
	return cu
}

// AddHealth adds i to the "health" field.
func (cu *CharacterUpdate) AddHealth(i int) *CharacterUpdate {
	cu.mutation.AddHealth(i)
	return cu
}

// SetMana sets the "mana" field.
func (cu *CharacterUpdate) SetMana(i int) *CharacterUpdate {
	cu.mutation.ResetMana()
	cu.mutation.SetMana(i)
	return cu
}

// AddMana adds i to the "mana" field.
func (cu *CharacterUpdate) AddMana(i int) *CharacterUpdate {
	cu.mutation.AddMana(i)
	return cu
}

// SetEquipped sets the "equipped" field.
func (cu *CharacterUpdate) SetEquipped(s string) *CharacterUpdate {
	cu.mutation.SetEquipped(s)
	return cu
}

// SetNillableEquipped sets the "equipped" field if the given value is not nil.
func (cu *CharacterUpdate) SetNillableEquipped(s *string) *CharacterUpdate {
	if s != nil {
		cu.SetEquipped(*s)
	}
	return cu
}

// SetLefthand sets the "lefthand" field.
func (cu *CharacterUpdate) SetLefthand(s string) *CharacterUpdate {
	cu.mutation.SetLefthand(s)
	return cu
}

// SetRighthand sets the "righthand" field.
func (cu *CharacterUpdate) SetRighthand(s string) *CharacterUpdate {
	cu.mutation.SetRighthand(s)
	return cu
}

// SetSpells sets the "spells" field.
func (cu *CharacterUpdate) SetSpells(s string) *CharacterUpdate {
	cu.mutation.SetSpells(s)
	return cu
}

// SetNillableSpells sets the "spells" field if the given value is not nil.
func (cu *CharacterUpdate) SetNillableSpells(s *string) *CharacterUpdate {
	if s != nil {
		cu.SetSpells(*s)
	}
	return cu
}

// SetSpellbook sets the "spellbook" field.
func (cu *CharacterUpdate) SetSpellbook(s string) *CharacterUpdate {
	cu.mutation.SetSpellbook(s)
	return cu
}

// SetNillableSpellbook sets the "spellbook" field if the given value is not nil.
func (cu *CharacterUpdate) SetNillableSpellbook(s *string) *CharacterUpdate {
	if s != nil {
		cu.SetSpellbook(*s)
	}
	return cu
}

// SetBags sets the "bags" field.
func (cu *CharacterUpdate) SetBags(s string) *CharacterUpdate {
	cu.mutation.SetBags(s)
	return cu
}

// SetNillableBags sets the "bags" field if the given value is not nil.
func (cu *CharacterUpdate) SetNillableBags(s *string) *CharacterUpdate {
	if s != nil {
		cu.SetBags(*s)
	}
	return cu
}

// SetSheaths sets the "sheaths" field.
func (cu *CharacterUpdate) SetSheaths(s string) *CharacterUpdate {
	cu.mutation.SetSheaths(s)
	return cu
}

// SetNillableSheaths sets the "sheaths" field if the given value is not nil.
func (cu *CharacterUpdate) SetNillableSheaths(s *string) *CharacterUpdate {
	if s != nil {
		cu.SetSheaths(*s)
	}
	return cu
}

// Mutation returns the CharacterMutation object of the builder.
func (cu *CharacterUpdate) Mutation() *CharacterMutation {
	return cu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CharacterUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(cu.hooks) == 0 {
		if err = cu.check(); err != nil {
			return 0, err
		}
		affected, err = cu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CharacterMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cu.check(); err != nil {
				return 0, err
			}
			cu.mutation = mutation
			affected, err = cu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(cu.hooks) - 1; i >= 0; i-- {
			if cu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CharacterUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CharacterUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CharacterUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cu *CharacterUpdate) check() error {
	if v, ok := cu.mutation.Steamid(); ok {
		if err := character.SteamidValidator(v); err != nil {
			return &ValidationError{Name: "steamid", err: fmt.Errorf(`ent: validator failed for field "Character.steamid": %w`, err)}
		}
	}
	if v, ok := cu.mutation.Slot(); ok {
		if err := character.SlotValidator(v); err != nil {
			return &ValidationError{Name: "slot", err: fmt.Errorf(`ent: validator failed for field "Character.slot": %w`, err)}
		}
	}
	if v, ok := cu.mutation.Name(); ok {
		if err := character.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Character.name": %w`, err)}
		}
	}
	if v, ok := cu.mutation.Gender(); ok {
		if err := character.GenderValidator(v); err != nil {
			return &ValidationError{Name: "gender", err: fmt.Errorf(`ent: validator failed for field "Character.gender": %w`, err)}
		}
	}
	if v, ok := cu.mutation.Race(); ok {
		if err := character.RaceValidator(v); err != nil {
			return &ValidationError{Name: "race", err: fmt.Errorf(`ent: validator failed for field "Character.race": %w`, err)}
		}
	}
	if v, ok := cu.mutation.Flags(); ok {
		if err := character.FlagsValidator(v); err != nil {
			return &ValidationError{Name: "flags", err: fmt.Errorf(`ent: validator failed for field "Character.flags": %w`, err)}
		}
	}
	if v, ok := cu.mutation.Quickslots(); ok {
		if err := character.QuickslotsValidator(v); err != nil {
			return &ValidationError{Name: "quickslots", err: fmt.Errorf(`ent: validator failed for field "Character.quickslots": %w`, err)}
		}
	}
	if v, ok := cu.mutation.Quests(); ok {
		if err := character.QuestsValidator(v); err != nil {
			return &ValidationError{Name: "quests", err: fmt.Errorf(`ent: validator failed for field "Character.quests": %w`, err)}
		}
	}
	if v, ok := cu.mutation.Guild(); ok {
		if err := character.GuildValidator(v); err != nil {
			return &ValidationError{Name: "guild", err: fmt.Errorf(`ent: validator failed for field "Character.guild": %w`, err)}
		}
	}
	if v, ok := cu.mutation.Kills(); ok {
		if err := character.KillsValidator(v); err != nil {
			return &ValidationError{Name: "kills", err: fmt.Errorf(`ent: validator failed for field "Character.kills": %w`, err)}
		}
	}
	if v, ok := cu.mutation.Gold(); ok {
		if err := character.GoldValidator(v); err != nil {
			return &ValidationError{Name: "gold", err: fmt.Errorf(`ent: validator failed for field "Character.gold": %w`, err)}
		}
	}
	if v, ok := cu.mutation.Skills(); ok {
		if err := character.SkillsValidator(v); err != nil {
			return &ValidationError{Name: "skills", err: fmt.Errorf(`ent: validator failed for field "Character.skills": %w`, err)}
		}
	}
	if v, ok := cu.mutation.Pets(); ok {
		if err := character.PetsValidator(v); err != nil {
			return &ValidationError{Name: "pets", err: fmt.Errorf(`ent: validator failed for field "Character.pets": %w`, err)}
		}
	}
	if v, ok := cu.mutation.Health(); ok {
		if err := character.HealthValidator(v); err != nil {
			return &ValidationError{Name: "health", err: fmt.Errorf(`ent: validator failed for field "Character.health": %w`, err)}
		}
	}
	if v, ok := cu.mutation.Mana(); ok {
		if err := character.ManaValidator(v); err != nil {
			return &ValidationError{Name: "mana", err: fmt.Errorf(`ent: validator failed for field "Character.mana": %w`, err)}
		}
	}
	if v, ok := cu.mutation.Equipped(); ok {
		if err := character.EquippedValidator(v); err != nil {
			return &ValidationError{Name: "equipped", err: fmt.Errorf(`ent: validator failed for field "Character.equipped": %w`, err)}
		}
	}
	if v, ok := cu.mutation.Lefthand(); ok {
		if err := character.LefthandValidator(v); err != nil {
			return &ValidationError{Name: "lefthand", err: fmt.Errorf(`ent: validator failed for field "Character.lefthand": %w`, err)}
		}
	}
	if v, ok := cu.mutation.Righthand(); ok {
		if err := character.RighthandValidator(v); err != nil {
			return &ValidationError{Name: "righthand", err: fmt.Errorf(`ent: validator failed for field "Character.righthand": %w`, err)}
		}
	}
	if v, ok := cu.mutation.Spells(); ok {
		if err := character.SpellsValidator(v); err != nil {
			return &ValidationError{Name: "spells", err: fmt.Errorf(`ent: validator failed for field "Character.spells": %w`, err)}
		}
	}
	if v, ok := cu.mutation.Spellbook(); ok {
		if err := character.SpellbookValidator(v); err != nil {
			return &ValidationError{Name: "spellbook", err: fmt.Errorf(`ent: validator failed for field "Character.spellbook": %w`, err)}
		}
	}
	if v, ok := cu.mutation.Bags(); ok {
		if err := character.BagsValidator(v); err != nil {
			return &ValidationError{Name: "bags", err: fmt.Errorf(`ent: validator failed for field "Character.bags": %w`, err)}
		}
	}
	if v, ok := cu.mutation.Sheaths(); ok {
		if err := character.SheathsValidator(v); err != nil {
			return &ValidationError{Name: "sheaths", err: fmt.Errorf(`ent: validator failed for field "Character.sheaths": %w`, err)}
		}
	}
	return nil
}

func (cu *CharacterUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   character.Table,
			Columns: character.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: character.FieldID,
			},
		},
	}
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.Steamid(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: character.FieldSteamid,
		})
	}
	if value, ok := cu.mutation.AddedSteamid(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: character.FieldSteamid,
		})
	}
	if value, ok := cu.mutation.Slot(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: character.FieldSlot,
		})
	}
	if value, ok := cu.mutation.AddedSlot(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: character.FieldSlot,
		})
	}
	if value, ok := cu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: character.FieldName,
		})
	}
	if value, ok := cu.mutation.Gender(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: character.FieldGender,
		})
	}
	if value, ok := cu.mutation.AddedGender(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: character.FieldGender,
		})
	}
	if value, ok := cu.mutation.Race(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: character.FieldRace,
		})
	}
	if value, ok := cu.mutation.AddedRace(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: character.FieldRace,
		})
	}
	if value, ok := cu.mutation.Flags(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: character.FieldFlags,
		})
	}
	if value, ok := cu.mutation.Quickslots(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: character.FieldQuickslots,
		})
	}
	if value, ok := cu.mutation.Quests(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: character.FieldQuests,
		})
	}
	if value, ok := cu.mutation.Guild(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: character.FieldGuild,
		})
	}
	if value, ok := cu.mutation.Kills(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt16,
			Value:  value,
			Column: character.FieldKills,
		})
	}
	if value, ok := cu.mutation.AddedKills(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt16,
			Value:  value,
			Column: character.FieldKills,
		})
	}
	if value, ok := cu.mutation.Gold(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: character.FieldGold,
		})
	}
	if value, ok := cu.mutation.AddedGold(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: character.FieldGold,
		})
	}
	if value, ok := cu.mutation.Skills(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: character.FieldSkills,
		})
	}
	if value, ok := cu.mutation.Pets(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: character.FieldPets,
		})
	}
	if value, ok := cu.mutation.Health(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: character.FieldHealth,
		})
	}
	if value, ok := cu.mutation.AddedHealth(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: character.FieldHealth,
		})
	}
	if value, ok := cu.mutation.Mana(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: character.FieldMana,
		})
	}
	if value, ok := cu.mutation.AddedMana(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: character.FieldMana,
		})
	}
	if value, ok := cu.mutation.Equipped(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: character.FieldEquipped,
		})
	}
	if value, ok := cu.mutation.Lefthand(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: character.FieldLefthand,
		})
	}
	if value, ok := cu.mutation.Righthand(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: character.FieldRighthand,
		})
	}
	if value, ok := cu.mutation.Spells(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: character.FieldSpells,
		})
	}
	if value, ok := cu.mutation.Spellbook(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: character.FieldSpellbook,
		})
	}
	if value, ok := cu.mutation.Bags(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: character.FieldBags,
		})
	}
	if value, ok := cu.mutation.Sheaths(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: character.FieldSheaths,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{character.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// CharacterUpdateOne is the builder for updating a single Character entity.
type CharacterUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CharacterMutation
}

// SetSteamid sets the "steamid" field.
func (cuo *CharacterUpdateOne) SetSteamid(u uint64) *CharacterUpdateOne {
	cuo.mutation.ResetSteamid()
	cuo.mutation.SetSteamid(u)
	return cuo
}

// AddSteamid adds u to the "steamid" field.
func (cuo *CharacterUpdateOne) AddSteamid(u int64) *CharacterUpdateOne {
	cuo.mutation.AddSteamid(u)
	return cuo
}

// SetSlot sets the "slot" field.
func (cuo *CharacterUpdateOne) SetSlot(u uint8) *CharacterUpdateOne {
	cuo.mutation.ResetSlot()
	cuo.mutation.SetSlot(u)
	return cuo
}

// AddSlot adds u to the "slot" field.
func (cuo *CharacterUpdateOne) AddSlot(u int8) *CharacterUpdateOne {
	cuo.mutation.AddSlot(u)
	return cuo
}

// SetName sets the "name" field.
func (cuo *CharacterUpdateOne) SetName(s string) *CharacterUpdateOne {
	cuo.mutation.SetName(s)
	return cuo
}

// SetGender sets the "gender" field.
func (cuo *CharacterUpdateOne) SetGender(u uint8) *CharacterUpdateOne {
	cuo.mutation.ResetGender()
	cuo.mutation.SetGender(u)
	return cuo
}

// AddGender adds u to the "gender" field.
func (cuo *CharacterUpdateOne) AddGender(u int8) *CharacterUpdateOne {
	cuo.mutation.AddGender(u)
	return cuo
}

// SetRace sets the "race" field.
func (cuo *CharacterUpdateOne) SetRace(u uint8) *CharacterUpdateOne {
	cuo.mutation.ResetRace()
	cuo.mutation.SetRace(u)
	return cuo
}

// AddRace adds u to the "race" field.
func (cuo *CharacterUpdateOne) AddRace(u int8) *CharacterUpdateOne {
	cuo.mutation.AddRace(u)
	return cuo
}

// SetFlags sets the "flags" field.
func (cuo *CharacterUpdateOne) SetFlags(s string) *CharacterUpdateOne {
	cuo.mutation.SetFlags(s)
	return cuo
}

// SetNillableFlags sets the "flags" field if the given value is not nil.
func (cuo *CharacterUpdateOne) SetNillableFlags(s *string) *CharacterUpdateOne {
	if s != nil {
		cuo.SetFlags(*s)
	}
	return cuo
}

// SetQuickslots sets the "quickslots" field.
func (cuo *CharacterUpdateOne) SetQuickslots(s string) *CharacterUpdateOne {
	cuo.mutation.SetQuickslots(s)
	return cuo
}

// SetNillableQuickslots sets the "quickslots" field if the given value is not nil.
func (cuo *CharacterUpdateOne) SetNillableQuickslots(s *string) *CharacterUpdateOne {
	if s != nil {
		cuo.SetQuickslots(*s)
	}
	return cuo
}

// SetQuests sets the "quests" field.
func (cuo *CharacterUpdateOne) SetQuests(s string) *CharacterUpdateOne {
	cuo.mutation.SetQuests(s)
	return cuo
}

// SetNillableQuests sets the "quests" field if the given value is not nil.
func (cuo *CharacterUpdateOne) SetNillableQuests(s *string) *CharacterUpdateOne {
	if s != nil {
		cuo.SetQuests(*s)
	}
	return cuo
}

// SetGuild sets the "guild" field.
func (cuo *CharacterUpdateOne) SetGuild(s string) *CharacterUpdateOne {
	cuo.mutation.SetGuild(s)
	return cuo
}

// SetKills sets the "kills" field.
func (cuo *CharacterUpdateOne) SetKills(i int16) *CharacterUpdateOne {
	cuo.mutation.ResetKills()
	cuo.mutation.SetKills(i)
	return cuo
}

// AddKills adds i to the "kills" field.
func (cuo *CharacterUpdateOne) AddKills(i int16) *CharacterUpdateOne {
	cuo.mutation.AddKills(i)
	return cuo
}

// SetGold sets the "gold" field.
func (cuo *CharacterUpdateOne) SetGold(u uint32) *CharacterUpdateOne {
	cuo.mutation.ResetGold()
	cuo.mutation.SetGold(u)
	return cuo
}

// AddGold adds u to the "gold" field.
func (cuo *CharacterUpdateOne) AddGold(u int32) *CharacterUpdateOne {
	cuo.mutation.AddGold(u)
	return cuo
}

// SetSkills sets the "skills" field.
func (cuo *CharacterUpdateOne) SetSkills(s string) *CharacterUpdateOne {
	cuo.mutation.SetSkills(s)
	return cuo
}

// SetNillableSkills sets the "skills" field if the given value is not nil.
func (cuo *CharacterUpdateOne) SetNillableSkills(s *string) *CharacterUpdateOne {
	if s != nil {
		cuo.SetSkills(*s)
	}
	return cuo
}

// SetPets sets the "pets" field.
func (cuo *CharacterUpdateOne) SetPets(s string) *CharacterUpdateOne {
	cuo.mutation.SetPets(s)
	return cuo
}

// SetNillablePets sets the "pets" field if the given value is not nil.
func (cuo *CharacterUpdateOne) SetNillablePets(s *string) *CharacterUpdateOne {
	if s != nil {
		cuo.SetPets(*s)
	}
	return cuo
}

// SetHealth sets the "health" field.
func (cuo *CharacterUpdateOne) SetHealth(i int) *CharacterUpdateOne {
	cuo.mutation.ResetHealth()
	cuo.mutation.SetHealth(i)
	return cuo
}

// AddHealth adds i to the "health" field.
func (cuo *CharacterUpdateOne) AddHealth(i int) *CharacterUpdateOne {
	cuo.mutation.AddHealth(i)
	return cuo
}

// SetMana sets the "mana" field.
func (cuo *CharacterUpdateOne) SetMana(i int) *CharacterUpdateOne {
	cuo.mutation.ResetMana()
	cuo.mutation.SetMana(i)
	return cuo
}

// AddMana adds i to the "mana" field.
func (cuo *CharacterUpdateOne) AddMana(i int) *CharacterUpdateOne {
	cuo.mutation.AddMana(i)
	return cuo
}

// SetEquipped sets the "equipped" field.
func (cuo *CharacterUpdateOne) SetEquipped(s string) *CharacterUpdateOne {
	cuo.mutation.SetEquipped(s)
	return cuo
}

// SetNillableEquipped sets the "equipped" field if the given value is not nil.
func (cuo *CharacterUpdateOne) SetNillableEquipped(s *string) *CharacterUpdateOne {
	if s != nil {
		cuo.SetEquipped(*s)
	}
	return cuo
}

// SetLefthand sets the "lefthand" field.
func (cuo *CharacterUpdateOne) SetLefthand(s string) *CharacterUpdateOne {
	cuo.mutation.SetLefthand(s)
	return cuo
}

// SetRighthand sets the "righthand" field.
func (cuo *CharacterUpdateOne) SetRighthand(s string) *CharacterUpdateOne {
	cuo.mutation.SetRighthand(s)
	return cuo
}

// SetSpells sets the "spells" field.
func (cuo *CharacterUpdateOne) SetSpells(s string) *CharacterUpdateOne {
	cuo.mutation.SetSpells(s)
	return cuo
}

// SetNillableSpells sets the "spells" field if the given value is not nil.
func (cuo *CharacterUpdateOne) SetNillableSpells(s *string) *CharacterUpdateOne {
	if s != nil {
		cuo.SetSpells(*s)
	}
	return cuo
}

// SetSpellbook sets the "spellbook" field.
func (cuo *CharacterUpdateOne) SetSpellbook(s string) *CharacterUpdateOne {
	cuo.mutation.SetSpellbook(s)
	return cuo
}

// SetNillableSpellbook sets the "spellbook" field if the given value is not nil.
func (cuo *CharacterUpdateOne) SetNillableSpellbook(s *string) *CharacterUpdateOne {
	if s != nil {
		cuo.SetSpellbook(*s)
	}
	return cuo
}

// SetBags sets the "bags" field.
func (cuo *CharacterUpdateOne) SetBags(s string) *CharacterUpdateOne {
	cuo.mutation.SetBags(s)
	return cuo
}

// SetNillableBags sets the "bags" field if the given value is not nil.
func (cuo *CharacterUpdateOne) SetNillableBags(s *string) *CharacterUpdateOne {
	if s != nil {
		cuo.SetBags(*s)
	}
	return cuo
}

// SetSheaths sets the "sheaths" field.
func (cuo *CharacterUpdateOne) SetSheaths(s string) *CharacterUpdateOne {
	cuo.mutation.SetSheaths(s)
	return cuo
}

// SetNillableSheaths sets the "sheaths" field if the given value is not nil.
func (cuo *CharacterUpdateOne) SetNillableSheaths(s *string) *CharacterUpdateOne {
	if s != nil {
		cuo.SetSheaths(*s)
	}
	return cuo
}

// Mutation returns the CharacterMutation object of the builder.
func (cuo *CharacterUpdateOne) Mutation() *CharacterMutation {
	return cuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CharacterUpdateOne) Select(field string, fields ...string) *CharacterUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Character entity.
func (cuo *CharacterUpdateOne) Save(ctx context.Context) (*Character, error) {
	var (
		err  error
		node *Character
	)
	if len(cuo.hooks) == 0 {
		if err = cuo.check(); err != nil {
			return nil, err
		}
		node, err = cuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CharacterMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cuo.check(); err != nil {
				return nil, err
			}
			cuo.mutation = mutation
			node, err = cuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cuo.hooks) - 1; i >= 0; i-- {
			if cuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CharacterUpdateOne) SaveX(ctx context.Context) *Character {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CharacterUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CharacterUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuo *CharacterUpdateOne) check() error {
	if v, ok := cuo.mutation.Steamid(); ok {
		if err := character.SteamidValidator(v); err != nil {
			return &ValidationError{Name: "steamid", err: fmt.Errorf(`ent: validator failed for field "Character.steamid": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.Slot(); ok {
		if err := character.SlotValidator(v); err != nil {
			return &ValidationError{Name: "slot", err: fmt.Errorf(`ent: validator failed for field "Character.slot": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.Name(); ok {
		if err := character.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Character.name": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.Gender(); ok {
		if err := character.GenderValidator(v); err != nil {
			return &ValidationError{Name: "gender", err: fmt.Errorf(`ent: validator failed for field "Character.gender": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.Race(); ok {
		if err := character.RaceValidator(v); err != nil {
			return &ValidationError{Name: "race", err: fmt.Errorf(`ent: validator failed for field "Character.race": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.Flags(); ok {
		if err := character.FlagsValidator(v); err != nil {
			return &ValidationError{Name: "flags", err: fmt.Errorf(`ent: validator failed for field "Character.flags": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.Quickslots(); ok {
		if err := character.QuickslotsValidator(v); err != nil {
			return &ValidationError{Name: "quickslots", err: fmt.Errorf(`ent: validator failed for field "Character.quickslots": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.Quests(); ok {
		if err := character.QuestsValidator(v); err != nil {
			return &ValidationError{Name: "quests", err: fmt.Errorf(`ent: validator failed for field "Character.quests": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.Guild(); ok {
		if err := character.GuildValidator(v); err != nil {
			return &ValidationError{Name: "guild", err: fmt.Errorf(`ent: validator failed for field "Character.guild": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.Kills(); ok {
		if err := character.KillsValidator(v); err != nil {
			return &ValidationError{Name: "kills", err: fmt.Errorf(`ent: validator failed for field "Character.kills": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.Gold(); ok {
		if err := character.GoldValidator(v); err != nil {
			return &ValidationError{Name: "gold", err: fmt.Errorf(`ent: validator failed for field "Character.gold": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.Skills(); ok {
		if err := character.SkillsValidator(v); err != nil {
			return &ValidationError{Name: "skills", err: fmt.Errorf(`ent: validator failed for field "Character.skills": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.Pets(); ok {
		if err := character.PetsValidator(v); err != nil {
			return &ValidationError{Name: "pets", err: fmt.Errorf(`ent: validator failed for field "Character.pets": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.Health(); ok {
		if err := character.HealthValidator(v); err != nil {
			return &ValidationError{Name: "health", err: fmt.Errorf(`ent: validator failed for field "Character.health": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.Mana(); ok {
		if err := character.ManaValidator(v); err != nil {
			return &ValidationError{Name: "mana", err: fmt.Errorf(`ent: validator failed for field "Character.mana": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.Equipped(); ok {
		if err := character.EquippedValidator(v); err != nil {
			return &ValidationError{Name: "equipped", err: fmt.Errorf(`ent: validator failed for field "Character.equipped": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.Lefthand(); ok {
		if err := character.LefthandValidator(v); err != nil {
			return &ValidationError{Name: "lefthand", err: fmt.Errorf(`ent: validator failed for field "Character.lefthand": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.Righthand(); ok {
		if err := character.RighthandValidator(v); err != nil {
			return &ValidationError{Name: "righthand", err: fmt.Errorf(`ent: validator failed for field "Character.righthand": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.Spells(); ok {
		if err := character.SpellsValidator(v); err != nil {
			return &ValidationError{Name: "spells", err: fmt.Errorf(`ent: validator failed for field "Character.spells": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.Spellbook(); ok {
		if err := character.SpellbookValidator(v); err != nil {
			return &ValidationError{Name: "spellbook", err: fmt.Errorf(`ent: validator failed for field "Character.spellbook": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.Bags(); ok {
		if err := character.BagsValidator(v); err != nil {
			return &ValidationError{Name: "bags", err: fmt.Errorf(`ent: validator failed for field "Character.bags": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.Sheaths(); ok {
		if err := character.SheathsValidator(v); err != nil {
			return &ValidationError{Name: "sheaths", err: fmt.Errorf(`ent: validator failed for field "Character.sheaths": %w`, err)}
		}
	}
	return nil
}

func (cuo *CharacterUpdateOne) sqlSave(ctx context.Context) (_node *Character, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   character.Table,
			Columns: character.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: character.FieldID,
			},
		},
	}
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Character.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, character.FieldID)
		for _, f := range fields {
			if !character.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != character.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.Steamid(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: character.FieldSteamid,
		})
	}
	if value, ok := cuo.mutation.AddedSteamid(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: character.FieldSteamid,
		})
	}
	if value, ok := cuo.mutation.Slot(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: character.FieldSlot,
		})
	}
	if value, ok := cuo.mutation.AddedSlot(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: character.FieldSlot,
		})
	}
	if value, ok := cuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: character.FieldName,
		})
	}
	if value, ok := cuo.mutation.Gender(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: character.FieldGender,
		})
	}
	if value, ok := cuo.mutation.AddedGender(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: character.FieldGender,
		})
	}
	if value, ok := cuo.mutation.Race(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: character.FieldRace,
		})
	}
	if value, ok := cuo.mutation.AddedRace(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: character.FieldRace,
		})
	}
	if value, ok := cuo.mutation.Flags(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: character.FieldFlags,
		})
	}
	if value, ok := cuo.mutation.Quickslots(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: character.FieldQuickslots,
		})
	}
	if value, ok := cuo.mutation.Quests(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: character.FieldQuests,
		})
	}
	if value, ok := cuo.mutation.Guild(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: character.FieldGuild,
		})
	}
	if value, ok := cuo.mutation.Kills(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt16,
			Value:  value,
			Column: character.FieldKills,
		})
	}
	if value, ok := cuo.mutation.AddedKills(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt16,
			Value:  value,
			Column: character.FieldKills,
		})
	}
	if value, ok := cuo.mutation.Gold(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: character.FieldGold,
		})
	}
	if value, ok := cuo.mutation.AddedGold(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint32,
			Value:  value,
			Column: character.FieldGold,
		})
	}
	if value, ok := cuo.mutation.Skills(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: character.FieldSkills,
		})
	}
	if value, ok := cuo.mutation.Pets(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: character.FieldPets,
		})
	}
	if value, ok := cuo.mutation.Health(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: character.FieldHealth,
		})
	}
	if value, ok := cuo.mutation.AddedHealth(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: character.FieldHealth,
		})
	}
	if value, ok := cuo.mutation.Mana(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: character.FieldMana,
		})
	}
	if value, ok := cuo.mutation.AddedMana(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: character.FieldMana,
		})
	}
	if value, ok := cuo.mutation.Equipped(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: character.FieldEquipped,
		})
	}
	if value, ok := cuo.mutation.Lefthand(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: character.FieldLefthand,
		})
	}
	if value, ok := cuo.mutation.Righthand(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: character.FieldRighthand,
		})
	}
	if value, ok := cuo.mutation.Spells(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: character.FieldSpells,
		})
	}
	if value, ok := cuo.mutation.Spellbook(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: character.FieldSpellbook,
		})
	}
	if value, ok := cuo.mutation.Bags(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: character.FieldBags,
		})
	}
	if value, ok := cuo.mutation.Sheaths(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: character.FieldSheaths,
		})
	}
	_node = &Character{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{character.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
