// Code generated by entc, DO NOT EDIT.

package character

import (
	"time"

	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the character type in the database.
	Label = "character"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldPlayerID holds the string denoting the player_id field in the database.
	FieldPlayerID = "player_id"
	// FieldVersion holds the string denoting the version field in the database.
	FieldVersion = "version"
	// FieldSlot holds the string denoting the slot field in the database.
	FieldSlot = "slot"
	// FieldSize holds the string denoting the size field in the database.
	FieldSize = "size"
	// FieldData holds the string denoting the data field in the database.
	FieldData = "data"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// EdgePlayer holds the string denoting the player edge name in mutations.
	EdgePlayer = "player"
	// Table holds the table name of the character in the database.
	Table = "characters"
	// PlayerTable is the table that holds the player relation/edge.
	PlayerTable = "characters"
	// PlayerInverseTable is the table name for the Player entity.
	// It exists in this package in order to avoid circular dependency with the "player" package.
	PlayerInverseTable = "players"
	// PlayerColumn is the table column denoting the player relation/edge.
	PlayerColumn = "player_id"
)

// Columns holds all SQL columns for character fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldPlayerID,
	FieldVersion,
	FieldSlot,
	FieldSize,
	FieldData,
	FieldDeletedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// VersionValidator is a validator for the "version" field. It is called by the builders before save.
	VersionValidator func(int) error
	// DefaultSlot holds the default value on creation for the "slot" field.
	DefaultSlot int
	// SlotValidator is a validator for the "slot" field. It is called by the builders before save.
	SlotValidator func(int) error
	// DefaultSize holds the default value on creation for the "size" field.
	DefaultSize int
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)
