// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/msrevive/nexus2/internal/ent/character"
	"github.com/msrevive/nexus2/internal/ent/player"
	"github.com/msrevive/nexus2/internal/ent/predicate"
)

// CharacterUpdate is the builder for updating Character entities.
type CharacterUpdate struct {
	config
	hooks    []Hook
	mutation *CharacterMutation
}

// Where appends a list predicates to the CharacterUpdate builder.
func (cu *CharacterUpdate) Where(ps ...predicate.Character) *CharacterUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetUpdatedAt sets the "updated_at" field.
func (cu *CharacterUpdate) SetUpdatedAt(t time.Time) *CharacterUpdate {
	cu.mutation.SetUpdatedAt(t)
	return cu
}

// SetPlayerID sets the "player_id" field.
func (cu *CharacterUpdate) SetPlayerID(u uuid.UUID) *CharacterUpdate {
	cu.mutation.SetPlayerID(u)
	return cu
}

// SetVersion sets the "version" field.
func (cu *CharacterUpdate) SetVersion(i int) *CharacterUpdate {
	cu.mutation.ResetVersion()
	cu.mutation.SetVersion(i)
	return cu
}

// AddVersion adds i to the "version" field.
func (cu *CharacterUpdate) AddVersion(i int) *CharacterUpdate {
	cu.mutation.AddVersion(i)
	return cu
}

// SetSlot sets the "slot" field.
func (cu *CharacterUpdate) SetSlot(i int) *CharacterUpdate {
	cu.mutation.ResetSlot()
	cu.mutation.SetSlot(i)
	return cu
}

// SetNillableSlot sets the "slot" field if the given value is not nil.
func (cu *CharacterUpdate) SetNillableSlot(i *int) *CharacterUpdate {
	if i != nil {
		cu.SetSlot(*i)
	}
	return cu
}

// AddSlot adds i to the "slot" field.
func (cu *CharacterUpdate) AddSlot(i int) *CharacterUpdate {
	cu.mutation.AddSlot(i)
	return cu
}

// SetSize sets the "size" field.
func (cu *CharacterUpdate) SetSize(i int) *CharacterUpdate {
	cu.mutation.ResetSize()
	cu.mutation.SetSize(i)
	return cu
}

// SetNillableSize sets the "size" field if the given value is not nil.
func (cu *CharacterUpdate) SetNillableSize(i *int) *CharacterUpdate {
	if i != nil {
		cu.SetSize(*i)
	}
	return cu
}

// AddSize adds i to the "size" field.
func (cu *CharacterUpdate) AddSize(i int) *CharacterUpdate {
	cu.mutation.AddSize(i)
	return cu
}

// SetData sets the "data" field.
func (cu *CharacterUpdate) SetData(s string) *CharacterUpdate {
	cu.mutation.SetData(s)
	return cu
}

// SetDeletedAt sets the "deleted_at" field.
func (cu *CharacterUpdate) SetDeletedAt(t time.Time) *CharacterUpdate {
	cu.mutation.SetDeletedAt(t)
	return cu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cu *CharacterUpdate) SetNillableDeletedAt(t *time.Time) *CharacterUpdate {
	if t != nil {
		cu.SetDeletedAt(*t)
	}
	return cu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (cu *CharacterUpdate) ClearDeletedAt() *CharacterUpdate {
	cu.mutation.ClearDeletedAt()
	return cu
}

// SetPlayer sets the "player" edge to the Player entity.
func (cu *CharacterUpdate) SetPlayer(p *Player) *CharacterUpdate {
	return cu.SetPlayerID(p.ID)
}

// Mutation returns the CharacterMutation object of the builder.
func (cu *CharacterUpdate) Mutation() *CharacterMutation {
	return cu.mutation
}

// ClearPlayer clears the "player" edge to the Player entity.
func (cu *CharacterUpdate) ClearPlayer() *CharacterUpdate {
	cu.mutation.ClearPlayer()
	return cu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CharacterUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	cu.defaults()
	if len(cu.hooks) == 0 {
		if err = cu.check(); err != nil {
			return 0, err
		}
		affected, err = cu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CharacterMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cu.check(); err != nil {
				return 0, err
			}
			cu.mutation = mutation
			affected, err = cu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(cu.hooks) - 1; i >= 0; i-- {
			if cu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CharacterUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CharacterUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CharacterUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cu *CharacterUpdate) defaults() {
	if _, ok := cu.mutation.UpdatedAt(); !ok {
		v := character.UpdateDefaultUpdatedAt()
		cu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cu *CharacterUpdate) check() error {
	if v, ok := cu.mutation.Version(); ok {
		if err := character.VersionValidator(v); err != nil {
			return &ValidationError{Name: "version", err: fmt.Errorf(`ent: validator failed for field "Character.version": %w`, err)}
		}
	}
	if v, ok := cu.mutation.Slot(); ok {
		if err := character.SlotValidator(v); err != nil {
			return &ValidationError{Name: "slot", err: fmt.Errorf(`ent: validator failed for field "Character.slot": %w`, err)}
		}
	}
	if _, ok := cu.mutation.PlayerID(); cu.mutation.PlayerCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Character.player"`)
	}
	return nil
}

func (cu *CharacterUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   character.Table,
			Columns: character.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: character.FieldID,
			},
		},
	}
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: character.FieldUpdatedAt,
		})
	}
	if value, ok := cu.mutation.Version(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: character.FieldVersion,
		})
	}
	if value, ok := cu.mutation.AddedVersion(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: character.FieldVersion,
		})
	}
	if value, ok := cu.mutation.Slot(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: character.FieldSlot,
		})
	}
	if value, ok := cu.mutation.AddedSlot(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: character.FieldSlot,
		})
	}
	if value, ok := cu.mutation.Size(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: character.FieldSize,
		})
	}
	if value, ok := cu.mutation.AddedSize(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: character.FieldSize,
		})
	}
	if value, ok := cu.mutation.Data(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: character.FieldData,
		})
	}
	if value, ok := cu.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: character.FieldDeletedAt,
		})
	}
	if cu.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: character.FieldDeletedAt,
		})
	}
	if cu.mutation.PlayerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   character.PlayerTable,
			Columns: []string{character.PlayerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: player.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.PlayerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   character.PlayerTable,
			Columns: []string{character.PlayerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: player.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{character.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// CharacterUpdateOne is the builder for updating a single Character entity.
type CharacterUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CharacterMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (cuo *CharacterUpdateOne) SetUpdatedAt(t time.Time) *CharacterUpdateOne {
	cuo.mutation.SetUpdatedAt(t)
	return cuo
}

// SetPlayerID sets the "player_id" field.
func (cuo *CharacterUpdateOne) SetPlayerID(u uuid.UUID) *CharacterUpdateOne {
	cuo.mutation.SetPlayerID(u)
	return cuo
}

// SetVersion sets the "version" field.
func (cuo *CharacterUpdateOne) SetVersion(i int) *CharacterUpdateOne {
	cuo.mutation.ResetVersion()
	cuo.mutation.SetVersion(i)
	return cuo
}

// AddVersion adds i to the "version" field.
func (cuo *CharacterUpdateOne) AddVersion(i int) *CharacterUpdateOne {
	cuo.mutation.AddVersion(i)
	return cuo
}

// SetSlot sets the "slot" field.
func (cuo *CharacterUpdateOne) SetSlot(i int) *CharacterUpdateOne {
	cuo.mutation.ResetSlot()
	cuo.mutation.SetSlot(i)
	return cuo
}

// SetNillableSlot sets the "slot" field if the given value is not nil.
func (cuo *CharacterUpdateOne) SetNillableSlot(i *int) *CharacterUpdateOne {
	if i != nil {
		cuo.SetSlot(*i)
	}
	return cuo
}

// AddSlot adds i to the "slot" field.
func (cuo *CharacterUpdateOne) AddSlot(i int) *CharacterUpdateOne {
	cuo.mutation.AddSlot(i)
	return cuo
}

// SetSize sets the "size" field.
func (cuo *CharacterUpdateOne) SetSize(i int) *CharacterUpdateOne {
	cuo.mutation.ResetSize()
	cuo.mutation.SetSize(i)
	return cuo
}

// SetNillableSize sets the "size" field if the given value is not nil.
func (cuo *CharacterUpdateOne) SetNillableSize(i *int) *CharacterUpdateOne {
	if i != nil {
		cuo.SetSize(*i)
	}
	return cuo
}

// AddSize adds i to the "size" field.
func (cuo *CharacterUpdateOne) AddSize(i int) *CharacterUpdateOne {
	cuo.mutation.AddSize(i)
	return cuo
}

// SetData sets the "data" field.
func (cuo *CharacterUpdateOne) SetData(s string) *CharacterUpdateOne {
	cuo.mutation.SetData(s)
	return cuo
}

// SetDeletedAt sets the "deleted_at" field.
func (cuo *CharacterUpdateOne) SetDeletedAt(t time.Time) *CharacterUpdateOne {
	cuo.mutation.SetDeletedAt(t)
	return cuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (cuo *CharacterUpdateOne) SetNillableDeletedAt(t *time.Time) *CharacterUpdateOne {
	if t != nil {
		cuo.SetDeletedAt(*t)
	}
	return cuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (cuo *CharacterUpdateOne) ClearDeletedAt() *CharacterUpdateOne {
	cuo.mutation.ClearDeletedAt()
	return cuo
}

// SetPlayer sets the "player" edge to the Player entity.
func (cuo *CharacterUpdateOne) SetPlayer(p *Player) *CharacterUpdateOne {
	return cuo.SetPlayerID(p.ID)
}

// Mutation returns the CharacterMutation object of the builder.
func (cuo *CharacterUpdateOne) Mutation() *CharacterMutation {
	return cuo.mutation
}

// ClearPlayer clears the "player" edge to the Player entity.
func (cuo *CharacterUpdateOne) ClearPlayer() *CharacterUpdateOne {
	cuo.mutation.ClearPlayer()
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CharacterUpdateOne) Select(field string, fields ...string) *CharacterUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Character entity.
func (cuo *CharacterUpdateOne) Save(ctx context.Context) (*Character, error) {
	var (
		err  error
		node *Character
	)
	cuo.defaults()
	if len(cuo.hooks) == 0 {
		if err = cuo.check(); err != nil {
			return nil, err
		}
		node, err = cuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CharacterMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cuo.check(); err != nil {
				return nil, err
			}
			cuo.mutation = mutation
			node, err = cuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cuo.hooks) - 1; i >= 0; i-- {
			if cuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CharacterUpdateOne) SaveX(ctx context.Context) *Character {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CharacterUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CharacterUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cuo *CharacterUpdateOne) defaults() {
	if _, ok := cuo.mutation.UpdatedAt(); !ok {
		v := character.UpdateDefaultUpdatedAt()
		cuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuo *CharacterUpdateOne) check() error {
	if v, ok := cuo.mutation.Version(); ok {
		if err := character.VersionValidator(v); err != nil {
			return &ValidationError{Name: "version", err: fmt.Errorf(`ent: validator failed for field "Character.version": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.Slot(); ok {
		if err := character.SlotValidator(v); err != nil {
			return &ValidationError{Name: "slot", err: fmt.Errorf(`ent: validator failed for field "Character.slot": %w`, err)}
		}
	}
	if _, ok := cuo.mutation.PlayerID(); cuo.mutation.PlayerCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "Character.player"`)
	}
	return nil
}

func (cuo *CharacterUpdateOne) sqlSave(ctx context.Context) (_node *Character, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   character.Table,
			Columns: character.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: character.FieldID,
			},
		},
	}
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Character.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, character.FieldID)
		for _, f := range fields {
			if !character.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != character.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: character.FieldUpdatedAt,
		})
	}
	if value, ok := cuo.mutation.Version(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: character.FieldVersion,
		})
	}
	if value, ok := cuo.mutation.AddedVersion(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: character.FieldVersion,
		})
	}
	if value, ok := cuo.mutation.Slot(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: character.FieldSlot,
		})
	}
	if value, ok := cuo.mutation.AddedSlot(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: character.FieldSlot,
		})
	}
	if value, ok := cuo.mutation.Size(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: character.FieldSize,
		})
	}
	if value, ok := cuo.mutation.AddedSize(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: character.FieldSize,
		})
	}
	if value, ok := cuo.mutation.Data(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: character.FieldData,
		})
	}
	if value, ok := cuo.mutation.DeletedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: character.FieldDeletedAt,
		})
	}
	if cuo.mutation.DeletedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: character.FieldDeletedAt,
		})
	}
	if cuo.mutation.PlayerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   character.PlayerTable,
			Columns: []string{character.PlayerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: player.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.PlayerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   character.PlayerTable,
			Columns: []string{character.PlayerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: player.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Character{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{character.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
